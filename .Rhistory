knitr::opts_chunk$set(echo = TRUE)
#libraries
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
library(sjPlot)
library(cvTools)
library(ozmaps)
library(vcdExtra)
library(corrplot)
library(RColorBrewer)
library(caret)
# Reading data
new_reef = read_csv("Data/lr_version_merged_mean.csv")
# Cleaning names
data = new_reef %>% janitor::clean_names()
## removing NA data entries
data <- na.omit(data)
## changing date to date
# data$date <- as.Date(data$date, format = "%d-%b-%y")
# Convert bleached
data$bleached <- ifelse(data$average_bleaching > 0, "1", "0")
# 0 = not bleached
# 1 = bleached
data %>% count(bleached)
# Convert to numeric
data$bleached <- as.factor(data$bleached)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
library(sjPlot)
library(cvTools)
library(ozmaps)
library(vcdExtra)
library(corrplot)
library(RColorBrewer)
library(caret)
# Reading data
new_reef = read_csv("Data/lr_version_merged_mean.csv")
# Cleaning names
data = new_reef %>% janitor::clean_names()
## removing NA data entries
data <- na.omit(data)
## changing date to date
# data$date <- as.Date(data$date, format = "%d-%b-%y")
# Convert bleached
data$bleached <- ifelse(data$average_bleaching > 0, "1", "0")
# 0 = not bleached
# 1 = bleached
data %>% count(bleached)
# Convert to numeric
data$bleached <- as.factor(data$bleached)
# Reading data
new_reef = read_csv("Data/lr_version_merged_mean.csv")
# Cleaning names
data = new_reef %>% janitor::clean_names()
## removing NA data entries
data <- na.omit(data)
## changing date to date
# data$date <- as.Date(data$date, format = "%d-%b-%y")
# Convert bleached
data$bleached <- ifelse(data$average_bleaching > 0, "1", "0")
# 0 = not bleached
# 1 = bleached
data %>% count(bleached)
# Convert to numeric
data$bleached <- as.factor(data$bleached)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
#LM data
lm_data = read_csv("time_df.csv")
#LM data
lm_data = read_csv("Models/Logistic Regression/time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_stability = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
lm_scalability = c(lm_data$Time[1:4]) # stability
#LM data
lm_data = read_csv("Models/Logistic Regression/time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_stability = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
lm_scalability = c(lm_data$Time[1:4]) # stability
#LM data
lm_data = read_csv("Models/Logistic Regression/time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_stability = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
lm_scalability = c(lm_data$Time[1:4]) # stability
#RF data
rf_data = read_csv("Models/Logistic Regression/rf.csv")
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$accuracies[1:5]
rf_scalability = rf_data$time[1:4]
#LM data
lm_data = read_csv("Models/Logistic Regression/time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_stability = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
lm_scalability = c(lm_data$Time[1:4]) # stability
#RF data
rf_data = read_csv("Models/Logistic Regression/rf.csv")
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$accuracies[1:5]
rf_scalability = rf_data$time[1:4]
#SVM data
svm_data = read_csv("Models/Logistic Regression/svm_time.csv")
svm_data
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$accuracies[1:5]
rf_scalability = rf_data$time[1:4]
#LM data
lm_data = read_csv("Models/Logistic Regression/time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_stability = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
lm_scalability = c(lm_data$Time[1:4]) # stability
#RF data
rf_data = read_csv("Models/Logistic Regression/rf.csv")
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$accuracies[1:5]
rf_scalability = rf_data$time[1:4]
#SVM data
svm_data = read_csv("Models/Logistic Regression/svm_time.csv")
svm_data
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$accuracies[1:5]
rf_scalability = rf_data$time[1:4]
#LM data
lm_data = read_csv("Models/Logistic Regression/time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_stability = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
lm_scalability = c(lm_data$Time[1:4]) # stability
#RF data
rf_data = read_csv("Models/Logistic Regression/rf.csv")
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$accuracies[1:5]
rf_scalability = rf_data$time[1:4]
#SVM data
svm_data = read_csv("Models/Logistic Regression/result.csv")
svm_data
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$accuracies[1:5]
rf_scalability = rf_data$time[1:4]
View(rf_data)
#LM data
lm_data = read_csv("Models/Logistic Regression/time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_stability = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
lm_scalability = c(lm_data$Time[1:4]) # stability
#RF data
rf_data = read_csv("Models/Logistic Regression/rf.csv")
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$accuracies[1:5]
rf_scalability = rf_data$time[1:4]
#SVM data
svm_data = read_csv("Models/Logistic Regression/result.csv")
svm_time_data = read_csv("Models/Logistic Regression/svm_time.csv")
svm_accuracy = svm_data$accuracy[1]
svm_stability = svm_data$accuracies[1:5]
svm_scalability = svm_time_data
#LM data
lm_data = read_csv("Models/Logistic Regression/time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_stability = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
lm_scalability = c(lm_data$Time[1:4]) # stability
#RF data
rf_data = read_csv("Models/Logistic Regression/rf.csv")
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$accuracies[1:5]
rf_scalability = rf_data$time[1:4]
#SVM data
svm_data = read_csv("Models/Logistic Regression/result.csv")
svm_time_data = read_csv("Models/Logistic Regression/svm_time.csv")
svm_accuracy = svm_data$accuracy[1]
svm_stability = svm_data$accuracies[1:5]
svm_scalability = svm_time_data
svm_time_data
#Accuracy
accuracies = data.frame(Accuracy = c(lm_accuracy, rf_accuracy, svm_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
accuracy <- ggplot(accuracies, aes(x = Model, y = Accuracy)) +
geom_bar(stat = "identity", width = 0.5, fill = "steelblue") +
theme_bw() +
ggtitle("Accuracy of Model")
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = as.factor(c('10%', '50%', '70%', '100%')),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line()
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = as.factor(c('10%', '50%', '70%', '100%')),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) + geom_line()
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = as.factor(c('10%', '50%', '70%', '100%')),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line()
View(svm_time_data)
#LM data
lm_data = read_csv("Models/Logistic Regression/time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_stability = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
lm_scalability = c(lm_data$Time[1:4]) # stability
#RF data
rf_data = read_csv("Models/Logistic Regression/rf.csv")
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$accuracies[1:5]
rf_scalability = rf_data$time[1:4]
#SVM data
svm_data = read_csv("Models/Logistic Regression/result.csv")
svm_time_data = read_csv("Models/Logistic Regression/svm_time.csv")
svm_accuracy = svm_data$accuracy[1]
svm_stability = svm_data$accuracies[1:5]
svm_scalability = svm_time_data$time
svm_scalability
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = as.factor(c('10%', '50%', '70%', '100%')),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) + geom_line()
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
library(sjPlot)
library(cvTools)
library(ozmaps)
library(vcdExtra)
library(corrplot)
library(RColorBrewer)
library(caret)
require(gridExtra)
oz_states <- ozmap_states
ggplot(oz_states) + geom_sf() + coord_sf() +
geom_point(
data = data,
aes(reef_longitude, reef_latitude, colour = bleached),
alpha = 0.7) + ggtitle("Amount of coral points bleached vs not bleached in the GBF") +
ylab("Latitude") + xlab("Longitude") + scale_colour_manual(labels = c("not bleached", "bleached"), values = c("red", "blue"))
oz_states <- ozmap_states
ggplot(oz_states) + geom_sf() + coord_sf() +
geom_point(
data = data,
aes(reef_longitude, reef_latitude, colour = bleached),
alpha = 0.7) + ggtitle("Amount of coral points bleached vs not bleached in the GBF") +
ylab("Latitude") + xlab("Longitude") + scale_colour_manual(labels = c("not bleached", "bleached"), values = c("red", "blue"))
ggplot(oz_states) + geom_sf() + coord_sf() +
geom_point(
data = data,
aes(reef_longitude, reef_latitude, size = average_bleaching, colour = average_bleaching),
alpha = 0.7) + ggtitle("Average coral bleaching along the GBF") +
ylab("Latitude") + xlab("Longitude")
oz_states <- ozmap_states
ggplot(oz_states) + geom_sf() + coord_sf() +
geom_point(
data = data,
aes(reef_longitude, reef_latitude, colour = bleached),
alpha = 0.7) + ggtitle("Amount of coral points bleached vs not bleached in the GBF") +
ylab("Latitude") + xlab("Longitude") + scale_colour_manual(labels = c("not bleached", "bleached"), values = c("red", "blue"))
oz_states <- ozmap_states
ggplot(oz_states) + geom_sf() + coord_sf() +
geom_point(
data = data,
aes(reef_longitude, reef_latitude, colour = bleached),
alpha = 0.7) + ggtitle("Amount of coral points bleached vs not bleached in the GBF") +
ylab("Latitude") + xlab("Longitude") + scale_colour_manual(labels = c("not bleached", "bleached"), values = c("red", "blue"))
problems()
View(oz_states)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
library(sjPlot)
library(cvTools)
library(ozmaps)
library(vcdExtra)
library(corrplot)
library(RColorBrewer)
library(caret)
require(gridExtra)
sessionInfo()
oz_states <- ozmap_states
ggplot(oz_states) + geom_sf() + coord_sf() +
geom_point(
data = data,
aes(reef_longitude, reef_latitude, size = average_bleaching, colour = average_bleaching),
alpha = 0.7) + ggtitle("Average coral bleaching along the GBF") +
ylab("Latitude") + xlab("Longitude")
#Read data
new_reef = read_csv("Data/lr_version_merged_mean.csv")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#libraries
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
library(sjPlot)
library(cvTools)
library(ozmaps)
library(vcdExtra)
library(corrplot)
library(RColorBrewer)
library(caret)
require(gridExtra)
#Read data
new_reef = read_csv("Data/lr_version_merged_mean.csv")
#Clean names
data = new_reef %>% janitor::clean_names()
data <- na.omit(data)
# We have to sort out bleached and not bleached corals
data$bleached <- ifelse(data$average_bleaching > 0, "1", "0")
# 0 = not bleached
# 1 = bleached
data %>% count(bleached)
# Convert to numeric
data$bleached <- as.factor(data$bleached)
oz_states <- ozmap_states
ggplot(oz_states) + geom_sf() + coord_sf() +
geom_point(
data = data,
aes(reef_longitude, reef_latitude, size = average_bleaching, colour = average_bleaching),
alpha = 0.7) + ggtitle("Average coral bleaching along the GBF") +
ylab("Latitude") + xlab("Longitude")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
library(sjPlot)
library(cvTools)
library(ozmaps)
library(vcdExtra)
library(corrplot)
library(RColorBrewer)
library(caret)
require(gridExtra)
fit <- glm(bleached ~ mean_cur, family = binomial, data = data)
fit
ggplot(data, aes(x=mean_cur, y=as.numeric(as.character(bleached)))) +
geom_point() +
stat_smooth(method="glm", se=FALSE, method.args = list(family="binomial"))
