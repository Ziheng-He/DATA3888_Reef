stat_smooth(method="glm", se=FALSE, method.args = list(family="binomial"))
fit <- glm(bleached ~ mean_cur, family = binomial, data = data)
fit
ggplot(data, aes(x=mean_cur, y=as.numeric(as.character(bleached)))) +
geom_point() +
stat_smooth(method="glm", se=FALSE, method.args = list(family="binomial"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
library(sjPlot)
library(cvTools)
library(ozmaps)
library(vcdExtra)
library(corrplot)
library(RColorBrewer)
library(caret)
# define training control
train_control <- trainControl(method = "cv", number = 5, savePredictions = TRUE)
# train the model on training set
model <- train(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur,
data = data,
method = "glm",
trControl = train_control,
family=binomial())
# print cv scores
print(model$results[2])
model$resample
accuracy_folds <- model$resample[1]
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = data)
summary(glm)
glm
# define training control
train_control <- trainControl(method = "cv", number = 5, savePredictions = TRUE)
# train the model on training set
model <- train(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur,
data = data,
method = "glm",
trControl = train_control,
family=binomial())
# print cv scores
print(model$results[2])
model$resample
accuracy_folds <- model$resample[1]
accuracy_folds
boxplot(accuracy_folds)
#1:
data$bleached
#1:
count(data$bleached)
# We have to sort out bleached and not bleached corals
data$bleached <- ifelse(data$average_bleaching > 0, "1", "0")
# 0 = not bleached
# 1 = bleached
data %>% count(bleached)
# Convert to numeric
data$bleached <- as.factor(data$bleached)
#1:
data%>% count(bleached)
#1:
data %>% count(bleached)
data_accuracy_score = 226/45
#1:
data %>% count(bleached)
data_accuracy_score = 226/45
data_accuracy_score
#1:
data %>% count(bleached)
data_accuracy_score = 226/226+45
data_accuracy_score
#1:
data %>% count(bleached)
data_accuracy_score = 226/(226+45)
data_accuracy_score
#1:
data %>% count(bleached)
data_accuracy_score = 226/(226+45)
data_accuracy_score
#2:
model_accuracy = model$results[2]
#1:
data %>% count(bleached)
data_accuracy_score = 226/(226+45)
data_accuracy_score
#2:
model_accuracy = model$results[2]
model_accuracy
#1:
data %>% count(bleached)
data_accuracy_score = 226/(226+45)
data_accuracy_score
#2:
model_accuracy = model$results[[2]]
model_accuracy
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
lm_data = read_csv("time_df")
lm_data = read_csv("time_df.csv")
lm_data = read_csv("time_df.csv")
lm_data
lm_data = read_csv("time_df.csv")
lm_data[1]
lm_data = read_csv("time_df.csv")
lm_data
lm_data = read_csv("time_df.csv")
lm_data
lm_data$Time
lm_data = read_csv("time_df.csv")
lm_data
lm_data$Time[1]
lm_data = read_csv("time_df.csv")
lm_data
lm_accuracy = lm_data$Time[6]
lm_accuracy
lm_data = read_csv("time_df.csv")
lm_data
lm_stability = c(lm_data$Time[1:4])
lm_accuracy = lm_data$Time[6]
lm_data = read_csv("time_df.csv")
lm_data
lm_stability = c(lm_data$Time[1:4])
lm_stability
lm_accuracy = lm_data$Time[6]
lm_data = read_csv("time_df.csv")
lm_data
lm_stability = c(lm_data$Time[1:4])
lm_accuracy = lm_data$Time[6]
lm_5_f = c(lm_data$Time[8:12])
lm_data = read_csv("time_df.csv")
lm_data
lm_stability = c(lm_data$Time[1:4])
lm_accuracy = lm_data$Time[6]
lm_5_f = c(lm_data$Time[8:12])
lm_data = read_csv("time_df.csv")
lm_data
lm_stability = c(lm_data$Time[1:4])
lm_accuracy = lm_data$Time[6]
lm_5_f = c(lm_data$Time[8:12])
lm_5_f
lm_data = read_csv("time_df.csv")
lm_data
lm_stability = c(lm_data$Time[1:4]) #stability
lm_accuracy = lm_data$Time[6] #accuracy
lm_5_f = c(lm_data$Time[8:12]) #5 fold accuracy boxplot
lm_data = read_csv("time_df.csv")
lm_stability = c(lm_data$Time[1:4]) #stability
lm_accuracy = lm_data$Time[6] #accuracy
lm_5_f = c(lm_data$Time[8:12]) #5 fold accuracy boxplot
lm_data = read_csv("time_df.csv")
#lm_data
lm_stability = c(lm_data$Time[1:4]) #stability
lm_accuracy = lm_data$Time[6] #accuracy
lm_5_f = c(lm_data$Time[8:12]) #5 fold accuracy boxplot
rf_data = read_csv("rf.csv")
rf_data = read_csv("rf.csv")
rf_data
rf_data = read_csv("rf.csv")
rf_data
rf_data$accuracy
rf_data = read_csv("rf.csv")
rf_data
rf_data$accuracy[1]
lm_data = read_csv("time_df.csv")
#lm_data
lm_accuracy = lm_data$Time[6] #accuracy
lm_stability = c(lm_data$Time[1:4]) #stability
lm_5_f = c(lm_data$Time[8:12]) #5 fold accuracy boxplot
rf_data = read_csv("rf.csv")
rf_data
rf_accuracy = rf_data$accuracy[1]
rf_data = read_csv("rf.csv")
rf_data
rf_accuracy = rf_data$accuracy[1]
rf_data$`train size`
rf_data = read_csv("rf.csv")
rf_data
rf_accuracy = rf_data$accuracy[1]
rf_data$time
rf_data = read_csv("rf.csv")
rf_data
rf_accuracy = rf_data$accuracy[1]
rf_data$time[1:4]
rf_data = read_csv("rf.csv")
rf_data
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$time[1:4]
rf_data = read_csv("rf.csv")
rf_data
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$time[1:4]
rf_5_f = rf_data$accuracies[1:5]
rf_data = read_csv("rf.csv")
rf_data
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$time[1:4]
rf_5_f = rf_data$accuracies[1:5]
rf_5_f
lm_data = read_csv("time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_stability = c(lm_data$Time[1:4]) # stability
lm_5_f = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
rf_data = read_csv("rf.csv")
rf_accuracy = rf_data$accuracy[1]
rf_stability = rf_data$time[1:4]
rf_5_f = rf_data$accuracies[1:5]
model_accuracy
#temp values
SVM_accuracy = 0.8
SVM_stability = c(0.003, 0.022, 0.033, 0.233)
SVM_5_f = c(0.82, 0.81, 0.74, 0.8, 0.78)
models_accuracy = c(lm_accuracy, rf_accuracy, SVM_accuracy)
models_accuracy = c(lm_accuracy, rf_accuracy, SVM_accuracy)
boxplot(models_accuracy)
models_accuracy = c(lm_accuracy, rf_accuracy, SVM_accuracy)
barplot(models_accuracy)
accuracies = c(lm_accuracy, rf_accuracy, SVM_accuracy)
models_accuracy <- ggplot(data=accuracies) +
geom_bar()
accuracies = c(lm_accuracy, rf_accuracy, SVM_accuracy)
models_accuracy <- ggplot(accuracies) +
geom_bar()
accuracies = c(lm_accuracy, rf_accuracy, SVM_accuracy)
models_accuracy <- ggplot(as.data.frame(accuracies)) +
geom_bar()
accuracies = c(lm_accuracy, rf_accuracy, SVM_accuracy)
models_accuracy <- ggplot(as.data.frame(accuracies)) +
geom_bar()
models_accuracy
accuracies = c(lm_accuracy, rf_accuracy, SVM_accuracy)
ggplot(as.data.frame(accuracies)) +
geom_bar()
accuracies = c(lm_accuracy, rf_accuracy, SVM_accuracy)
as.data.frame(accuracies)
ggplot(as.data.frame(accuracies)) +
geom_bar()
accuracies = data.frame(c(lm_accuracy, rf_accuracy, SVM_accuracy))
ggplot(accuracies) +
geom_bar()
accuracies = data.frame(c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies) +
geom_bar()
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar()
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(tidyverse)
library(maps)
library(ggplot2)
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar()
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity")
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity") +  scale_fill_hue(c = 40)
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", fill=rgb(0.1,0.4,0.5,0.7))
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", fill=rgb(0.1))
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", fill=rgb(0.1,0.4,0.5,0.7))
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", fill=rgb(0.2,0.4,0.5,0.7), width = 0.5)
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label=len), vjust=-0.3, size=3.5)
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label=Value), vjust=-0.3, size=3.5)
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label=round(Value),2), vjust=-0.3, size=3.5)
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label=Value), vjust=-0.3, size=3.5)
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", width = 0.5)
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", width = 0.5) +
theme_minimal()
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", width = 0.5, fill = "steelblue") +
theme_minimal()
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", width = 0.5, fill = "blue") +
theme_minimal()
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", width = 0.5, fill = "steelblue") +
theme_minimal()
accuracies = data.frame(Value = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Value)) +
geom_bar(stat = "identity", width = 0.5, fill = "steelblue") +
theme_bw()
accuracies = data.frame(Accuracy = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Accuracy)) +
geom_bar(stat = "identity", width = 0.5, fill = "steelblue") +
theme_bw()
accuracies = data.frame(Accuracy = c(lm_accuracy, rf_accuracy, SVM_accuracy),
Model = c("Logistic Regression", "Random Forest", "Support Vector Machine"))
ggplot(accuracies, aes(x = Model, y = Accuracy)) +
geom_bar(stat = "identity", width = 0.5, fill = "steelblue") +
theme_bw() +
ggtitle("Accuracy of Model")
stabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
time = c(lm_stability, rf_stability, svm_stability))
stabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
time = c(lm_stability, rf_stability, svm_stability))
#temp values
svm_accuracy = 0.8
svm_stability = c(0.003, 0.022, 0.033, 0.233)
svm_5_f = c(0.82, 0.81, 0.74, 0.8, 0.78)
stabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
time = c(lm_stability, rf_stability, svm_stability))
stabilities
lm_data = read_csv("time_df.csv")
lm_accuracy = lm_data$Time[6] # accuracy
lm_scalability = c(lm_data$Time[1:4]) # stability
lm_stability = c(lm_data$Time[8:12]) # 5 fold accuracy boxplot
rf_data = read_csv("rf.csv")
rf_accuracy = rf_data$accuracy[1]
rf_scalability = rf_data$time[1:4]
rf_stability = rf_data$accuracies[1:5]
#temp values
svm_accuracy = 0.8
svm_scalability = c(0.003, 0.022, 0.033, 0.233)
svm_stability = c(0.82, 0.81, 0.74, 0.8, 0.78)
stabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
time = c(lm_stability, rf_stability, svm_stability))
stabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 5),
time = c(lm_stability, rf_stability, svm_stability))
boxplot(stabilities$time ~ df$model,
col='steelblue',
main='Accuracies per fold',
xlab='Model',
ylab='Time')
stabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 5),
time = c(lm_stability, rf_stability, svm_stability))
stabilities
boxplot(stabilities$time ~ df$model,
col='steelblue',
main='Accuracies per fold',
xlab='Model',
ylab='Time')
stabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 5),
time = c(lm_stability, rf_stability, svm_stability))
stabilities
boxplot(stabilities$time ~ stabilities$model,
col='steelblue',
main='Accuracies per fold',
xlab='Model',
ylab='Time')
stabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 5),
time = c(lm_stability, rf_stability, svm_stability))
boxplot(stabilities$time ~ stabilities$model,
col='steelblue',
main='Accuracies per fold',
xlab='Model',
ylab='Time')
stabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 5),
accuracies = c(lm_stability, rf_stability, svm_stability))
boxplot(stabilities$accuracies ~ stabilities$model,
col='steelblue',
main='Accuracies per fold',
xlab='Model',
ylab='Accuracies')
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
ggplot(scalabilities, aes(x=train_size, y=time)) +
geom_line()
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
ggplot(scalabilities, aes(x=train_size, y=time, colour = model)) +
geom_line()
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x=train_size, y=time, colour = model)) +
geom_line()
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, colour = model)) +
geom_line()
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = train_size, colour = model)) +
geom_line()
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = time, y = time, colour = model)) +
geom_line()
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, colour = model)) +
geom_line()
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line()
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line() +
scale_x_discrete("Train Size", labels = c("10%" = "10%","50%" = "50%", "70%" = "70%","100%" = "100%"))
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line() +
scale_x_discrete("Train Size", labels = c("10%" = "10%","50%" = "50%", "70%" = "70%","all" = "100%"))
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line() +
scale_x_discrete("Train Size", labels = c("10%" = "10%","50%" = "50%", "70%" = "70%","100%" = "all%"))
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line() +
scale_x_discrete("Train Size", labels = arrange(c("10%" = "10%","50%" = "50%", "70%" = "70%","100%" = "100%")))
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line() +
scale_x_discrete("Train Size", labels = ascending(c("10%" = "10%","50%" = "50%", "70%" = "70%","100%" = "100%")))
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = c('10%', '50%', '70%', '100%'),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line() +
scale_x_discrete("Train Size", labels = as.factor(c("10%" = "10%","50%" = "50%", "70%" = "70%","100%" = "100%")))
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = as.factor(c('10%', '50%', '70%', '100%')),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line() +
scalabilities <- data.frame(model = rep(c('LM', 'RF', 'SVM'), each = 4),
train_size = as.factor(c('10%', '50%', '70%', '100%')),
time = c(lm_scalability, rf_scalability, svm_scalability))
scalabilities
ggplot(scalabilities, aes(x = train_size, y = time, group = model, colour = model)) +
geom_line()
