knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(tidyverse)
library(sjPlot)
library(cvTools)
library(vcdExtra)
library(corrplot)
library(RColorBrewer)
library(caret)
#reef = read_csv("Data/Reef_Check_with_cortad_variables_with_annual_rate_of_SST_change.csv")
new_reef = read_csv("Data/lr_version_merged_mean.csv")
#reef = read_csv("Data/Reef_Check_with_cortad_variables_with_annual_rate_of_SST_change.csv")
new_reef = read_csv("data/lr_version_merged_mean.csv")
#reef = read_csv("Data/Reef_Check_with_cortad_variables_with_annual_rate_of_SST_change.csv")
new_reef = read_csv("Data_copy/lr_version_merged_mean.csv")
# Check what the reef dataset looks like
head(new_reef)
## clean variable names
data = new_reef %>% janitor::clean_names()
names(data)
## removing NA data entries
data <- na.omit(data)
## changing date to date
# data$date <- as.Date(data$date, format = "%d-%b-%y")
## changing temperature to celcius
data$temperature_celcius <- data$temperature_kelvin - 273.15
## longitude and latitude maximum and minimum to match dataset
# We have to sort out bleached and not bleached corals
data$bleached <- ifelse(data$average_bleaching > 0, "1", "0")
# 0 = not bleached
# 1 = bleached
data %>% count(bleached)
# Convert to numeric
data$bleached <- as.numeric(data$bleached)
# We have to sort out bleached and not bleached corals
data$bleached <- ifelse(data$average_bleaching > 0, "1", "0")
# 0 = not bleached
# 1 = bleached
data %>% count(bleached)
# Convert to numeric
data$bleached <- as.factor(data$bleached)
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = data)
summary(glm)
glm
# define training control
train_control <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
# train the model on training set
model <- train(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur,
data = data,
method = "glm",
trControl = train_control,
family=binomial())
# print cv scores
print(model)
model$resample
#Sampling 10% of the data
sample_10 <- data[sample(1:nrow(data), 27,
replace=FALSE),]
start_time <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_10)
end_time <- Sys.time()
end_time - start_time
#sampling 50% of data
sample_50 <- data[sample(1:nrow(data), 135,
replace=FALSE),]
start_time <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_50)
end_time <- Sys.time()
end_time - start_time
#sampling 70% of data
sample_70 <- data[sample(1:nrow(data), 189,
replace=FALSE),]
start_time <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_70)
end_time <- Sys.time()
end_time - start_time
#the whole data
start_time <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = data)
end_time <- Sys.time()
end_time - start_time
path = "./Models/logistic"
model_rds_path = paste(path, ".rds",sep='')
model_dep_path = paste(path, ".dep",sep='')
DEP_LIBS = c("caret")
# save model
saveRDS(model, model_rds_path)
#Sampling 10% of the data
sample_10 <- data[sample(1:nrow(data), 27,
replace=FALSE),]
start_time_10 <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_10)
end_time_10 <- Sys.time()
end_time_10 - start_time_10
#sampling 50% of data
sample_50 <- data[sample(1:nrow(data), 135,
replace=FALSE),]
start_time <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_50)
end_time <- Sys.time()
end_time - start_time
#sampling 50% of data
sample_50 <- data[sample(1:nrow(data), 135,
replace=FALSE),]
start_time_50 <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_50)
end_time_50 <- Sys.time()
end_time_50 - start_time_50
#the whole data
start_time <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = data)
end_time <- Sys.time()
end_time - start_time
#the whole data
start_time <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = data)
end_time <- Sys.time()
end_time - start_time
#the whole data
start_time <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = data)
end_time <- Sys.time()
end_time - start_time
#Sampling 10% of the data
sample_10 <- data[sample(1:nrow(data), 27,
replace=FALSE),]
start_time_10 <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_10)
end_time_10 <- Sys.time()
end_time_10 - start_time_10
#sampling 50% of data
sample_50 <- data[sample(1:nrow(data), 135,
replace=FALSE),]
start_time_50 <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_50)
end_time_50 <- Sys.time()
end_time_50 - start_time_50
#sampling 70% of data
sample_70 <- data[sample(1:nrow(data), 189,
replace=FALSE),]
start_time_70 <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_70)
end_time_70 <- Sys.time()
end_time_70 - start_time_70
#the whole data
start_time_100 <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = data)
end_time_100 <- Sys.time()
end_time_100 - start_time_100
#Sampling 10% of the data
sample_10 <- data[sample(1:nrow(data), 27,
replace=FALSE),]
start_time_10 <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_10)
end_time_10 <- Sys.time()
time_10 = end_time_10 - start_time_10
#sampling 50% of data
sample_50 <- data[sample(1:nrow(data), 135,
replace=FALSE),]
start_time_50 <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_50)
end_time_50 <- Sys.time()
time_50 = end_time_50 - start_time_50
#sampling 70% of data
sample_70 <- data[sample(1:nrow(data), 189,
replace=FALSE),]
start_time_70 <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = sample_70)
end_time_70 <- Sys.time()
time_70 = end_time_70 - start_time_70
#the whole data
start_time_100 <- Sys.time()
glm = glm(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur, family = binomial, data = data)
end_time_100 <- Sys.time()
time_100 = end_time_100 - start_time_100
df = data.frame(Sample = c(10,50,70,100),
Time = c(time_10, time_50, time_70, time_100))
time_df = data.frame(Sample = c(10,50,70,100),
Time = c(time_10, time_50, time_70, time_100))
time_df = data.frame(Sample = c(10,50,70,100),
Time = c(time_10, time_50, time_70, time_100))
#export to Zhenyu, convert to csv
write.csv(time_df, "time_df.csv", row.names=FALSE)
time_df = data.frame(Sample_percent = c(10,50,70,100),
Time = c(time_10, time_50, time_70, time_100))
#export to Zhenyu, convert to csv
write.csv(time_df, "time_df.csv", row.names=FALSE)
bwplot(model$resample, metric = "Accuracy")
bwplot(resample, metric = "Accuracy")
bwplot(resample, metric = "Accuracy")
# define training control
train_control <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
# train the model on training set
model <- train(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur,
data = data,
method = "glm",
trControl = train_control,
family=binomial())
# print cv scores
print(model)
resample <- model$resample
bwplot(resample, metric = "Accuracy")
ggplot(resample, metric = "Accuracy")
boxplot(resample, metric = "Accuracy")
# define training control
train_control <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
# train the model on training set
model <- train(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur,
data = data,
method = "glm",
trControl = train_control,
family=binomial())
# print cv scores
print(model)
resample <- model$resample
# define training control
train_control <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
# train the model on training set
model <- train(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur,
data = data,
method = "glm",
trControl = train_control,
family=binomial())
# print cv scores
print(model)
model$resample
# define training control
train_control <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
# train the model on training set
model <- train(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur,
data = data,
method = "glm",
trControl = train_control,
family=binomial())
# print cv scores
print(model)
model$resample[1]
boxplot(Accuracy_folds)
# define training control
train_control <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
# train the model on training set
model <- train(bleached ~ clim_sst + temperature_kelvin + temperature_kelvin_standard_deviation + ssta_frequency + ssta_frequency_standard_deviation + tsa_frequency_standard_deviation + mean_cur,
data = data,
method = "glm",
trControl = train_control,
family=binomial())
# print cv scores
print(model)
accuracy_folds <- model$resample[1]
boxplot(accuracy_folds)
boxplot(accuracy_folds) + geom_point(accuracy_folds)
accuracy_folds %>%
ggplot() +
geom_boxplot() +
geom_jitter()
accuracy_folds %>%
ggplot(aes(x = "name")) +
geom_boxplot() +
geom_jitter()
accuracy_folds %>%
ggplot(aes(x = "name", y = "value")) +
geom_boxplot() +
geom_jitter()
accuracy_folds %>%
geom_boxplot() +
geom_jitter()
boxplot(accuracy_folds)
boxplot(accuracy_folds)
stripchart(accuracy_folds,
method = "jitter")
boxplot(accuracy_folds)
stripchart(accuracy_folds,
method = "jitter",
add = "TRUE")
boxplot(accuracy_folds)
stripchart(accuracy_folds,
method = "jitter",
add = TRUE)
boxplot(accuracy_folds) + geom_dotplot
boxplot(accuracy_folds) + geom_dotplot()
boxplot(accuracy_folds) + geom_jitter()
